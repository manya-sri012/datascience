import pandas as pd

# Load the dataset
data = pd.read_csv('data.csv')

# Preview the data
print(data.head())
# Handle missing values (if any)
data.fillna(method='ffill', inplace=True)  # Forward fill as an example

# Features and target variable
features = ['Feature1', 'Feature2', 'Feature3']  # Replace with actual feature names
target = 'Target'

X = data[features]
y = data[target]
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = LinearRegression()
model.fit(X_train, y_train)
# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")
# Example: Predicting new data
new_data = pd.DataFrame({
    'Feature1': [value1],  # Replace with actual values
    'Feature2': [value2],
    'Feature3': [value3]
})

predictions = model.predict(new_data)
print(f"Predicted value: {predictions[0]}")
import matplotlib.pyplot as plt

# Plot the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue', label='Predicted vs Actual')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Fit')
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.legend()
plt.show()
